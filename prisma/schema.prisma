generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// User Model
model User {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  name              String?
  bio               String?
  location          String?
  email             String?            @unique
  emailVerified     DateTime?
  image             String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  accounts          Account[]
  recipeCollections RecipeCollection[]
  comments          Comment[]
  bookmarks         Bookmark[]
  recipes           Recipe[]
}

// Recipe Collection Model
model RecipeCollection {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  desc      String?
  avatar    String?
  userID    String   @db.ObjectId
  recipeIDs String[] @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  recipes   Recipe[] @relation(fields: [recipeIDs], references: [id])
}

// Recipe Model
enum RecipeCategory {
  breakfast
  brunch
  snack
  appetizers
  lunch
  drinks
  dessert
  dinner
}

enum RecipeRegion {
  japanese
  chinese
  vietnamese
  russian
  korean
  indian
  indonesian
  pakistani
  american
  italian
  thai
  french
  mediterranean
  mexican
  spanish
  greek
}

type IngredientQuantity {
  num    Int
  suffix String
}

type RecipeIngredient {
  name     String
  quantity IngredientQuantity
}

type RecipeNutrition {
  calories Int?
  protein  Int?
  carb     Int?
  fat      Int?
}

model Recipe {
  id                  String             @id @default(auto()) @map("_id") @db.ObjectId
  title               String
  desc                String
  ingredients         RecipeIngredient[]
  category            RecipeCategory
  steps               String[]
  tags                String[]
  avatar              String
  region              RecipeRegion
  nutrition           RecipeNutrition?
  servings            Int                @default(1)
  prepTime            Int
  cookTime            Int
  notes               String[]
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  userID              String             @db.ObjectId
  user                User               @relation(fields: [userID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  recipeCollectionIDs String[]           @db.ObjectId
  comments            Comment[]
  bookmarks           Bookmark[]
  recipeCollections   RecipeCollection[] @relation(fields: [recipeCollectionIDs], references: [id])
}

model Bookmark {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  userID   String @db.ObjectId
  recipeID String @db.ObjectId
  user     User   @relation(fields: [userID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  recipe   Recipe @relation(fields: [recipeID], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([userID, recipeID])
}

model Comment {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  comment  String
  rating   Int    @default(1)
  recipeID String @db.ObjectId
  recipe   Recipe @relation(fields: [recipeID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userID   String @db.ObjectId
  user     User   @relation(fields: [userID], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

// auth models
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
